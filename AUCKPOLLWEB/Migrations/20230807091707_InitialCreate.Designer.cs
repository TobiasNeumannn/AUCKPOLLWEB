// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AUCKPOLLWEB.Migrations
{
    [DbContext(typeof(AUCKPOLLWEBContextDb))]
    [Migration("20230807091707_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AUCKPOLLWEB.Models.airQuality", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("collection_date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("regionID")
                        .HasColumnType("int");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("value")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("regionID");

                    b.ToTable("airQuality");
                });

            modelBuilder.Entity("AUCKPOLLWEB.Models.estuaryQuality", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("collection_date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("indicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("regionID")
                        .HasColumnType("int");

                    b.Property<float>("value")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("regionID");

                    b.ToTable("estuaryQuality");
                });

            modelBuilder.Entity("AUCKPOLLWEB.Models.gWaterQuality", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<string>("collection_date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("indicator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("regionID")
                        .HasColumnType("int");

                    b.Property<string>("unit")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("value")
                        .HasColumnType("real");

                    b.HasKey("ID");

                    b.HasIndex("regionID");

                    b.ToTable("gWaterQuality");
                });

            modelBuilder.Entity("AUCKPOLLWEB.Models.regions", b =>
                {
                    b.Property<int>("regionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("regionID"));

                    b.Property<string>("region_name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("region_pop")
                        .HasColumnType("int");

                    b.HasKey("regionID");

                    b.ToTable("regions");
                });

            modelBuilder.Entity("AUCKPOLLWEB.Models.airQuality", b =>
                {
                    b.HasOne("AUCKPOLLWEB.Models.regions", "Region")
                        .WithMany("airQualities")
                        .HasForeignKey("regionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AUCKPOLLWEB.Models.estuaryQuality", b =>
                {
                    b.HasOne("AUCKPOLLWEB.Models.regions", "Region")
                        .WithMany("estuaryQualities")
                        .HasForeignKey("regionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AUCKPOLLWEB.Models.gWaterQuality", b =>
                {
                    b.HasOne("AUCKPOLLWEB.Models.regions", "Region")
                        .WithMany("gWaterQualities")
                        .HasForeignKey("regionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");
                });

            modelBuilder.Entity("AUCKPOLLWEB.Models.regions", b =>
                {
                    b.Navigation("airQualities");

                    b.Navigation("estuaryQualities");

                    b.Navigation("gWaterQualities");
                });
#pragma warning restore 612, 618
        }
    }
}
